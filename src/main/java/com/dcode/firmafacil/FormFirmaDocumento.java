package com.dcode.firmafacil;

import com.dcode.firmafacil.Data.DDocumento;
import com.dcode.firmafacil.Modelo.Documento;
import com.google.gson.Gson;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.icepdf.ri.common.*;

public class FormFirmaDocumento extends javax.swing.JPanel {

    boolean editar = false;
//    MDemanda demandaEditar;

    Documento documentoObj;

    public FormFirmaDocumento() {
        initComponents();
        InitStyles();
        // CargarCuentaBancoCMB();
    }

    public FormFirmaDocumento(Documento documento) {
        initComponents();
        InitStyles();
        editar = true;
        this.documentoObj = documento;

        byte[] pdfBytes = documentoObj.getArchivoOrigen();
        System.out.println("public FormFirmaDocumento(Documento documento)  " + pdfBytes);
        VisualizarPdf(pdfBytes);
    }

    private void InitStyles() {
        if (documentoObj != null) {
            byte[] base = documentoObj.getArchivoOrigen();
        }
    }

    private void VisualizarPdf(byte[] base64EncodedPDF) {

        System.out.println("VisualizarPdf:: " + base64EncodedPDF);

        try {

            // Crear InputStream desde bytes
            ByteArrayInputStream inputStream = new ByteArrayInputStream(base64EncodedPDF);

            // Configurar el controlador de IcePDF
            SwingController controller = new SwingController();

            // Construir el panel del visor con el controlador
            SwingViewBuilder factory = new SwingViewBuilder(controller);
            JPanel viewerComponentPanel = factory.buildViewerPanel();

            // Cargar el documento desde el InputStream
            controller.openDocument(inputStream, "PDF Document", null);

            // Configurar el JScrollPane y añadir el panel del visor
            JScrollPane jScrollPanePdfView = new JScrollPane(viewerComponentPanel);
            jScrollPanePdfView.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            jScrollPanePdfView.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

            // Configurar y mostrar el JFrame
            JFrame frame = new JFrame("Visualizador de PDF en JScrollPane");
            frame.getContentPane().add(jScrollPanePdfView);
            frame.setSize(800, 600);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setVisible(true);

            // Asegurar que el InputStream se cierra al cerrar la aplicación
            frame.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                    try {
                        inputStream.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    System.exit(0);
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cargar el PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        txtFactura = new javax.swing.JTextField();
        btnGuardarDemanda = new javax.swing.JButton();
        header1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPanePdfView = new javax.swing.JScrollPane();

        setBackground(new java.awt.Color(255, 255, 255));

        bg.setBackground(new java.awt.Color(255, 255, 255));

        nameLbl.setText("Documento");

        btnGuardarDemanda.setBackground(new java.awt.Color(18, 90, 173));
        btnGuardarDemanda.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnGuardarDemanda.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardarDemanda.setText("Firmar Documento");
        btnGuardarDemanda.setBorderPainted(false);
        btnGuardarDemanda.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnGuardarDemanda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDemandaActionPerformed(evt);
            }
        });

        header1.setBackground(new java.awt.Color(25, 118, 210));
        header1.setPreferredSize(new java.awt.Dimension(744, 150));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Firmar Documento");

        javax.swing.GroupLayout header1Layout = new javax.swing.GroupLayout(header1);
        header1.setLayout(header1Layout);
        header1Layout.setHorizontalGroup(
            header1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header1Layout.createSequentialGroup()
                .addGap(260, 260, 260)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(255, Short.MAX_VALUE))
        );
        header1Layout.setVerticalGroup(
            header1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(header1, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnGuardarDemanda, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPanePdfView, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(bgLayout.createSequentialGroup()
                .addComponent(header1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardarDemanda))
                .addGap(18, 18, 18)
                .addComponent(jScrollPanePdfView, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarDemandaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDemandaActionPerformed
        // TODO add your handling code here:

        // TODO add your handling code here:
        Gson gson = new Gson();
        Documento doc = new Documento();
//        doc.setIdDocumento(Integer.parseInt(txtIdDocumento.getText()));
        doc.setIdDocumento(1);

        DDocumento ddoc = new DDocumento();
        List<Documento> documentos = new ArrayList<>();
        documentos = ddoc.SelectByIdDocumento(doc);

        for (Documento documento : documentos) {
            try {
                Informacion data = new Informacion();
                data.setNombre(documento.getNombreDocumento());
                String base64String = Base64.getEncoder().encodeToString(documento.getArchivoOrigen());
                data.setData(base64String);

                String json = gson.toJson(data);
                System.out.println("json: " + json);

                // Crear el objeto HttpClient
                HttpClient client = HttpClient.newHttpClient();

                // Crear el objeto HttpRequest
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create("http://localhost:8080/pki/firma"))
                        .header("Content-Type", "application/json")
                        .POST(HttpRequest.BodyPublishers.ofString(json))
                        .build();

                System.out.println("request: " + request);

                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

                ApiResponse apiResponse = gson.fromJson(response.body(), ApiResponse.class);

                System.out.println("apiResponse:" + apiResponse.data);

                // 6. Decodificar el Base64 y guardar el archivo PDF si el estado es OK
                if ("OK".equals(apiResponse.estado)) {
                    byte[] pdfData = Base64.getDecoder().decode(apiResponse.data);

                    // 7. Guardar el PDF
                    Path path = Path.of("D:\\output.pdf");

                    Files.write(path, pdfData);
                    System.out.println("Archivo PDF guardado correctamente.");
                } else {
                    System.out.println("Estado no es OK, no se guardará el archivo.");
                }

            } catch (IOException ex) {
                Logger.getLogger(FormDocumento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(FormDocumento.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_btnGuardarDemandaActionPerformed

    private static class ApiResponse {

        String estado;
        String data;
    }

    public class Informacion {

        private String data;
        private String nombre;

        public Informacion(String data, String nombre) {
            this.data = data;
            this.nombre = nombre;
        }

        public Informacion() {
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        public String getNombre() {
            return nombre;
        }

        public void setNombre(String nombre) {
            this.nombre = nombre;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnGuardarDemanda;
    private javax.swing.JPanel header1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPanePdfView;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField txtFactura;
    // End of variables declaration//GEN-END:variables
}
