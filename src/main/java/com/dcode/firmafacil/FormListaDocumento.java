package com.dcode.firmafacil;

import static com.dcode.firmafacil.Dashboard.ShowJPanel;
import com.dcode.firmafacil.Data.DDocumento;
import com.dcode.firmafacil.Data.DServicio;
import com.dcode.firmafacil.Modelo.Documento;
import com.dcode.firmafacil.Modelo.ServicioDocumento;
import com.google.gson.Gson;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class FormListaDocumento extends javax.swing.JPanel {

    boolean editar = false;
//    MDemanda demandaEditar;

    public FormListaDocumento() {
        initComponents();
        InitStyles();
        Mostrar(1);
        // CargarCuentaBancoCMB();
    }
    //Sobreescritura

//    public PlantillaCrud(MDemanda mDemandaEdit) {
//        System.out.println("Inicializando Cuenta CRUD" + mDemandaEdit);
//        initComponents();
//        editar = true;
//        this.demandaEditar = mDemandaEdit;
//        InitStyles();
//      //  Mostrar(mDemandaEdit);
//
//    }
//    public void CargarCuentaBancoCMB() {
//        cmbCuentaBanco.removeAllItems();
//        UtilitariosJDBC utilJdbc = new UtilitariosJDBC();
//        List<Poldat> cuentasList = utilJdbc.SelectCuentasBancosCmb();
//        System.out.println("Cargar Combo: " + cuentasList);
////
////        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(cuentasList.toArray(new String[0]));
////        cmbCuentaBanco.setModel(model);
//
//        for (Poldat poldat : cuentasList) {
//            System.out.println("Llenando Combo: " + poldat.rtstr1);
//            cmbCuentaBanco.addItem(poldat.rtstr1);
//        }
//    }
    public void Mostrar(int IdCliente) {
        
        System.out.println("Mostrar Listado Documentos!!! ");

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("IdDocumento");
        modelo.addColumn("Empresa");
        modelo.addColumn("Categoria");
        modelo.addColumn("ArchivoOrigen");
        modelo.addColumn("Firmado");
        modelo.addColumn("FechaServicio");
        modelo.addColumn("FechaVigencia");
        modelo.addColumn("NombreUsuario");

        jTableServicioDocumento.setModel(modelo);

        DServicio servicio = new DServicio();
        List<ServicioDocumento> serviciodocumentoList = servicio.SelectDocumentoByCliente(1);
        System.out.println(" Traer datos " + serviciodocumentoList);

        String servicioDocForTable[] = new String[8];
        for (ServicioDocumento item : serviciodocumentoList) {

            servicioDocForTable[0] = "" + item.getIdDocumento();
            servicioDocForTable[1] = item.getEmpresa();
            servicioDocForTable[2] = item.getCategoria();
            servicioDocForTable[3] = "*.pdf";
            servicioDocForTable[4] = "" + item.getIdServicio();
            servicioDocForTable[5] = "" + item.getFechaServicio();
            servicioDocForTable[6] = "" + item.getFechaVigencia();
            servicioDocForTable[6] = item.getUsuarioFirma();
            modelo.addRow(servicioDocForTable);
        }
        
        jTableServicioDocumento.setModel(modelo);
    }


    private void InitStyles() {

//        if (demandaEditar != null) {
//
//            //Mostrar(cuentaEditar);
//            System.out.println("InitStyles >>> " + demandaEditar);
//
//         //   txtFactura.setText(demandaEditar.getDocumento());
//           // txtDeudaPendiente.setEnabled(false);
//
//       //     String doc = cuentaEditar.getDocumento();
//         //   CuentaDetalle cuentaDet = new CuentaDetalle();
//           // cuentaDet.setDocumento(doc);
//            //MostrarListaCuentaDetalle(cuentaDet);
//
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        txtFactura = new javax.swing.JTextField();
        btnFirmarDocumento = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableServicioDocumento = new javax.swing.JTable();
        header1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnRegistrarDocumento = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        bg.setBackground(new java.awt.Color(255, 255, 255));

        btnFirmarDocumento.setBackground(new java.awt.Color(18, 90, 173));
        btnFirmarDocumento.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnFirmarDocumento.setForeground(new java.awt.Color(255, 255, 255));
        btnFirmarDocumento.setText("Firmar Documento");
        btnFirmarDocumento.setBorderPainted(false);
        btnFirmarDocumento.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnFirmarDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirmarDocumentoActionPerformed(evt);
            }
        });

        jTableServicioDocumento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableServicioDocumento.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jTableServicioDocumento);

        header1.setBackground(new java.awt.Color(25, 118, 210));
        header1.setPreferredSize(new java.awt.Dimension(744, 150));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Listado de Documentos [Firma Electronica]");

        javax.swing.GroupLayout header1Layout = new javax.swing.GroupLayout(header1);
        header1.setLayout(header1Layout);
        header1Layout.setHorizontalGroup(
            header1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header1Layout.createSequentialGroup()
                .addGap(260, 260, 260)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        header1Layout.setVerticalGroup(
            header1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        btnRegistrarDocumento.setBackground(new java.awt.Color(18, 90, 173));
        btnRegistrarDocumento.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRegistrarDocumento.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarDocumento.setText("Registrar");
        btnRegistrarDocumento.setBorderPainted(false);
        btnRegistrarDocumento.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnRegistrarDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarDocumentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(header1, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(btnRegistrarDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFirmarDocumento)
                        .addGap(78, 78, 78)))
                .addContainerGap())
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(bgLayout.createSequentialGroup()
                .addComponent(header1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(btnRegistrarDocumento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFirmarDocumento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnFirmarDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirmarDocumentoActionPerformed
        // TODO add your handling code here:

        // TODO add your handling code here:
        Gson gson = new Gson();
        Documento doc = new Documento();
//        doc.setIdDocumento(Integer.parseInt(txtIdDocumento.getText()));
        doc.setIdDocumento(1);

        DDocumento ddoc = new DDocumento();
        List<Documento> documentos = new ArrayList<>();
        documentos = ddoc.SelectByIdDocumento(doc);

        for (Documento documento : documentos) {
            try {
                Informacion data = new Informacion();
                data.setNombre(documento.getNombreDocumento());
                String base64String = Base64.getEncoder().encodeToString(documento.getArchivoOrigen());
                data.setData(base64String);

                String json = gson.toJson(data);
                System.out.println("json: " + json);

                // Crear el objeto HttpClient
                HttpClient client = HttpClient.newHttpClient();

                // Crear el objeto HttpRequest
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create("http://localhost:8080/pki/firma"))
                        .header("Content-Type", "application/json")
                        .POST(HttpRequest.BodyPublishers.ofString(json))
                        .build();

                System.out.println("request: " + request);

                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

                ApiResponse apiResponse = gson.fromJson(response.body(), ApiResponse.class);

                System.out.println("apiResponse:" + apiResponse.data);

                // 6. Decodificar el Base64 y guardar el archivo PDF si el estado es OK
                if ("OK".equals(apiResponse.estado)) {
                    byte[] pdfData = Base64.getDecoder().decode(apiResponse.data);

                    // 7. Guardar el PDF
                    Path path = Path.of("D:\\output.pdf");

                    Files.write(path, pdfData);
                    System.out.println("Archivo PDF guardado correctamente.");
                } else {
                    System.out.println("Estado no es OK, no se guardará el archivo.");
                }

            } catch (IOException ex) {
                Logger.getLogger(FormDocumento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(FormDocumento.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

//        int fila = 0;
//        int total = 0;
//        for (int i = 0; i < jTableCuentaDetalle.getRowCount(); i++) {
//            fila = Integer.parseInt(jTableCuentaDetalle.getValueAt(i, 1).toString());
//
//            total += fila;
//        }
//        int contador;
//
//        if (total == 0) {
//            contador = 1;
//        } else {
//            contador = jTableCuentaDetalle.getRowCount() + 1;
//        }
        //double calcularSaldo = 0;
        //  String numdoc = cuentaEditar.getDocumento();
        // MDemanda objCd = new MDemanda();
//        objCd.setNrocuotadet(contador);
//        objCd.setIngresodet(Double.parseDouble(txtIngresoDet.getText()));
//        objCd.setSaldodet(calcularSaldo);
//        //objCd.setCuentabancodet(txtCuentaBanco.getText());
//        objCd.setCuentabancodet((String) cmbCuentaBanco.getSelectedItem());
//        System.out.println("Combo getName" + (String) cmbCuentaBanco.getSelectedItem());
//        objCd.setGlosadet(txtGlosa.getText());
//        objCd.setIdmovimiento(idmovimiento);
//        objCd.setDocumento(numdoc);
//        System.out.println("objCuentaDetalle   >>>> " + objCd);
//
//        double ingresoDeuda = Double.parseDouble(txtIngresoDet.getText());
//        double deudaPendiente = Double.parseDouble(txtDeudaPendiente.getText());
//        if (ingresoDeuda > deudaPendiente) {
//
//            JOptionPane.showMessageDialog(null, "El Pago Supera la Deuda");
//
//        } else {
//
//            DDemanda dDemanda = new DDemanda();
//            if (editar == true) {
//                System.out.println("Ediatr Cuenta Detallle ::: " + editar);
//                int rtaInsert = dDemanda.insertDemanda(objCd);
//                System.out.println("Insert Cuenta Detalle:  " + rtaInsert);
//                if (rtaInsert == 1) {
//
//                 //   MostrarListaCuentaDetalle(objCd);
//                   // Mostrar(cuentaEditar);
//                    //LimpiarTexto();
//                }
//
//            }
//        }

        /*
        LineaCredito obj = new LineaCredito();
        obj.setNombre_cliente(txtcliente.getText());
        obj.setRuc_cliente(txtRUC.getText());
        obj.setDias_credito(Integer.parseInt(txtdiascredito.getText()));
        obj.setMonto_maximo(Double.parseDouble(txtMontoMaximo.getText()));
        obj.setMoneda(txtMoneda.getText());
        obj.setUsuario_registro("chuamanic");
        obj.setRiesgo_crediticio(editar ? lineaCreditoEditar.getRiesgo_crediticio() : "medio");
        

        System.out.println("Valores: >>>>>" + obj);

        LineaCreditoJDBC lineaCreditoJDBC = new LineaCreditoJDBC();
        if (editar == false) {
            int rta = lineaCreditoJDBC.insertLineaCredito(obj);

            if (rta == 1) {
                Dashboard.ShowJPanel(new LineaCreditoLista());
                JOptionPane.showMessageDialog(null, "Se Agrego correctamente");
            }
        } else {
            obj.setIdlc(lineaCreditoEditar.getIdlc());

            int rta = lineaCreditoJDBC.updateLineaCredito(obj);

            if (rta == 1) {
                Dashboard.ShowJPanel(new LineaCreditoLista());
                JOptionPane.showMessageDialog(null, "Se Modifico correctamente");
            }
        }
         */

    }//GEN-LAST:event_btnFirmarDocumentoActionPerformed

    private static class ApiResponse {

        String estado;
        String data;
    }

    public class Informacion {

        private String data;
        private String nombre;

        public Informacion(String data, String nombre) {
            this.data = data;
            this.nombre = nombre;
        }

        public Informacion() {
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        public String getNombre() {
            return nombre;
        }

        public void setNombre(String nombre) {
            this.nombre = nombre;
        }

    }


    private void btnRegistrarDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarDocumentoActionPerformed
        // TODO add your handling code here:
        ShowJPanel(new FormDocumento());
    }//GEN-LAST:event_btnRegistrarDocumentoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnFirmarDocumento;
    private javax.swing.JButton btnRegistrarDocumento;
    private javax.swing.JPanel header1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableServicioDocumento;
    private javax.swing.JTextField txtFactura;
    // End of variables declaration//GEN-END:variables
}
